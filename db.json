{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/BlueLake/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/toctotop.js","path":"js/toctotop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/BlueLake/source/img/bg.jpg","path":"img/bg.jpg","modified":0,"renderable":1},{"_id":"source/img/java-memory.jpg","path":"img/java-memory.jpg","modified":0,"renderable":0},{"_id":"source/img/java-memory2.jpg","path":"img/java-memory2.jpg","modified":0,"renderable":0},{"_id":"source/img/java-stack.jpg","path":"img/java-stack.jpg","modified":0,"renderable":0},{"_id":"source/img/java-stack2.jpg","path":"img/java-stack2.jpg","modified":0,"renderable":0},{"_id":"source/img/cpu.jpg","path":"img/cpu.jpg","modified":0,"renderable":0},{"_id":"source/img/eclipse-conf.jpg","path":"img/eclipse-conf.jpg","modified":0,"renderable":0},{"_id":"source/img/memory.jpg","path":"img/memory.jpg","modified":0,"renderable":0},{"_id":"themes/BlueLake/source/css/source-code-pro.css","path":"css/source-code-pro.css","modified":0,"renderable":1},{"_id":"source/img/author.jpg","path":"img/author.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"8f38a39941c7880575b03adc5f0501d7671271e9","modified":1530264498980},{"_id":"themes/BlueLake/_config.yml","hash":"d5d89587613ac0c40df49c225b7cc0073e2f0ac8","modified":1530264616264},{"_id":"themes/BlueLake/README.en.md","hash":"b9f84036214ec79a8c319c5383696e0076305dfe","modified":1530182335402},{"_id":"themes/BlueLake/LICENSE","hash":"3e191ca3f51efc111863c4941051291a696ef43e","modified":1530182335402},{"_id":"themes/BlueLake/README.md","hash":"152969bd5a7e94a595d058f085c517b65d3b61d2","modified":1530182335427},{"_id":"themes/BlueLake/package.json","hash":"e06eea20c64b2821631a49e8902e645bad2c5102","modified":1530182335427},{"_id":"source/_posts/.DS_Store","hash":"3b9f57fe860c652fd2ee5e089683cff58d066751","modified":1530253238807},{"_id":"source/_posts/JVM原理.md","hash":"53b1ddfff6d5eb53485a8fd8ec6ef95f4add13a0","modified":1530264033913},{"_id":"source/_posts/hello-world.md","hash":"c46c430769cd80302261a382980866082868240e","modified":1530249534675},{"_id":"source/about/index.md","hash":"de17d1004dfca1aff3e920a469b91319d269260f","modified":1530182335399},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"3e78b20edc66b153cb6b708734ad9aa5381266bc","modified":1530182335425},{"_id":"themes/BlueLake/languages/en.yml","hash":"88f4e4cffce5598f949192d7e76c863a0d409981","modified":1530182335424},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"83ee131065111147d20ec13c4634a27ee4fd541d","modified":1530182335424},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"d9f90ef2c6b4d8c95d142d021a5f47dda8462715","modified":1530182335425},{"_id":"themes/BlueLake/languages/ko.yml","hash":"20c7df4087ee65d75e96f68c71fdb050eb63677f","modified":1530182335423},{"_id":"themes/BlueLake/languages/tr.yml","hash":"817eb487056b1740556829db88013554fadcc392","modified":1530182335426},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"61f419488d4a8f62c2b90ee766b6e68ba2e88bd7","modified":1530182335425},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"0755af57d92a07ecff0e327f78eb25b0623a5852","modified":1530182335426},{"_id":"themes/BlueLake/layout/archive.jade","hash":"0497469c869f0ac28f150295dbddf6920e6582c1","modified":1530182335403},{"_id":"themes/BlueLake/layout/base.jade","hash":"d374f11a22a177294cd5595073c38c175847ad60","modified":1530264151033},{"_id":"themes/BlueLake/layout/category.jade","hash":"384e2e2588ecab3f518f03f11f2b052d3827fad8","modified":1530182335416},{"_id":"themes/BlueLake/layout/index.jade","hash":"ba1ea647af5c134b1a950638ea864663b29d4e22","modified":1530182335404},{"_id":"themes/BlueLake/layout/page.jade","hash":"7d2a48f6a902605fd6cfc237e3c2f9c02d76492e","modified":1530182335405},{"_id":"themes/BlueLake/layout/post.jade","hash":"3025e7e259d69551a35f17db3c3981aaa77fe7bc","modified":1530182335405},{"_id":"themes/BlueLake/layout/tag.jade","hash":"34ffba3e8a3b42ba95bf04d40ba329ab8b557267","modified":1530182335416},{"_id":"themes/BlueLake/source/favicon.ico","hash":"951b183a011308c90099a9922dce8cf3e011274c","modified":1530263164501},{"_id":"themes/BlueLake/source/apple-touch-icon.png","hash":"951b183a011308c90099a9922dce8cf3e011274c","modified":1530263164501},{"_id":"source/_posts/img/java-stack.jpg","hash":"1f274c71b5aa93940059574fa8cf87379c677757","modified":1530182335395},{"_id":"source/_posts/img/java-memory2.jpg","hash":"863ea04e441356616906435801b88ba298f749f7","modified":1530182335398},{"_id":"source/_posts/img/java-memory.jpg","hash":"60385605b5e88fd9a0dc45f429ad06c98c17bdc6","modified":1530182335395},{"_id":"source/_posts/img/java-stack2.jpg","hash":"5f31530393b5f62a824dc15535ac29994fa37ab8","modified":1530182335395},{"_id":"themes/BlueLake/layout/_widget/archive.jade","hash":"082ae16dad18ada28913772675861d7230134bea","modified":1530182335413},{"_id":"themes/BlueLake/layout/_widget/category.jade","hash":"ba43bd011d64cd86fa420677c9000d328f4f6114","modified":1530182335414},{"_id":"themes/BlueLake/layout/_widget/links.jade","hash":"ff46afdedc1ab3c075ffed686b98f23aed066124","modified":1530182335412},{"_id":"themes/BlueLake/layout/_widget/recent_comments.jade","hash":"f8ae55d5514fe493651ec04fbe73cb5fc482f7cd","modified":1530182335413},{"_id":"themes/BlueLake/layout/_widget/recent_posts.jade","hash":"a0309137277323f2fd61a3c6691e1bc51026f711","modified":1530182335414},{"_id":"themes/BlueLake/layout/_widget/tag.jade","hash":"573e975b15228eb21a1b95041a909984545baa9a","modified":1530182335415},{"_id":"themes/BlueLake/layout/_widget/weibo.jade","hash":"53e99461ae7f8efb2a1e78ad3090dd93d18bcd5c","modified":1530182335415},{"_id":"themes/BlueLake/layout/_partial/after_footer.jade","hash":"26ae121ecc5bbe351927dd273d58871f69454500","modified":1530182335407},{"_id":"themes/BlueLake/layout/_partial/comment_count.jade","hash":"52e4cacd58d5e0061924189ad75e0c3bf622aa7f","modified":1530182335412},{"_id":"themes/BlueLake/layout/_partial/comments.jade","hash":"af9a4a65eba65c5140921326f2b5cae9db5d7d28","modified":1530182335408},{"_id":"themes/BlueLake/layout/_partial/comments_js.jade","hash":"25e28dc48c392a5d10db1ed0f8a5899598d643d5","modified":1530182335409},{"_id":"themes/BlueLake/layout/_partial/footer.jade","hash":"dbc5c401f4d8aa80fe9e73423aadb8b8969f0b62","modified":1530182335408},{"_id":"themes/BlueLake/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1530182335410},{"_id":"themes/BlueLake/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1530182335410},{"_id":"themes/BlueLake/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1530182335411},{"_id":"themes/BlueLake/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1530182335406},{"_id":"themes/BlueLake/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1530182335407},{"_id":"themes/BlueLake/layout/_partial/search.jade","hash":"1c988c7e1f716036e428ee16b8005a7b1bfb33c7","modified":1530182335408},{"_id":"themes/BlueLake/layout/_partial/share.jade","hash":"28d79fbb9d8ecc5692d3063e439f16224188abac","modified":1530182335407},{"_id":"themes/BlueLake/layout/_partial/tag.jade","hash":"89842d9c791637a3c1447edf0898931a37a1b05f","modified":1530182335411},{"_id":"themes/BlueLake/layout/_partial/totop.jade","hash":"3e4141538285aef2bd019832ba62bafd094c6097","modified":1530182335406},{"_id":"themes/BlueLake/source/css/highlight.styl","hash":"be9ad73454b7029311caafd8e1faa469a5d4f58d","modified":1530182335418},{"_id":"themes/BlueLake/source/css/style.styl","hash":"5852cc541b74868e6464c7224b65683ea5aaa8d8","modified":1530182335418},{"_id":"themes/BlueLake/source/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1530182335421},{"_id":"themes/BlueLake/source/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1530182335421},{"_id":"themes/BlueLake/source/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1530182335421},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1530182335420},{"_id":"themes/BlueLake/source/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1530182335419},{"_id":"themes/BlueLake/source/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1530182335420},{"_id":"themes/BlueLake/source/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1530182335422},{"_id":"source/_posts/img/cpu.jpg","hash":"e3f2a3a314def53be767a0e47a732bd291e938de","modified":1530182335394},{"_id":"source/_posts/img/eclipse-conf.jpg","hash":"c20d0f5d5f63f96c96f2ae0a5e0ba71430109871","modified":1530182335396},{"_id":"source/_posts/img/memory.jpg","hash":"f44f8a01804b977ea8a25d871604e584b276d555","modified":1530182335397},{"_id":"themes/BlueLake/source/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1530182335423},{"_id":"public/about/index.html","hash":"f22119fd8c13069ff69974d792479d69da21eeb7","modified":1530264627840},{"_id":"public/2018/06/28/hello-world.html","hash":"eaf55033bf2bbf901f9691f2a1bc7e98b4b4a175","modified":1530245657274},{"_id":"public/index.html","hash":"9e721bfdb71f572028238b3d62f5942b99fb6f86","modified":1530264255150},{"_id":"public/archives/index.html","hash":"8035d2983c4d7316de5525a21156a7d8e54aa0e7","modified":1530264255150},{"_id":"public/archives/2018/index.html","hash":"8035d2983c4d7316de5525a21156a7d8e54aa0e7","modified":1530264255150},{"_id":"public/tags/Jvm/index.html","hash":"8710f49118999a86d21fc0affbd9a6437230dad7","modified":1530264255150},{"_id":"public/tags/原理/index.html","hash":"5fae56009457dc991d27908d95ad26966cca414c","modified":1530264255150},{"_id":"public/2018/06/19/JVM原理.html","hash":"bbaed166ed76b5aee13aed1c79622a8d17f09d28","modified":1530249540975},{"_id":"public/archives/2018/06/index.html","hash":"8035d2983c4d7316de5525a21156a7d8e54aa0e7","modified":1530264255150},{"_id":"public/favicon.ico","hash":"94e5d25d942bff5479470322454c951f2ddebac6","modified":1530245657278},{"_id":"public/apple-touch-icon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1530245657279},{"_id":"public/iconfont/iconfont.eot","hash":"e664dd848ca65fe3aca4acfc234ff9c18ffd4c33","modified":1530245657279},{"_id":"public/iconfont/iconfont.ttf","hash":"5770696cc0d19d9c9479912a5cf54c9dd4ab24c4","modified":1530245657279},{"_id":"public/iconfont/iconfont.woff","hash":"df2bd849134cbd02beb385e5061a30b923c99058","modified":1530245657279},{"_id":"public/iconfont/iconfont.svg","hash":"2b6a0b21bf63bdf746130117baf432fcb44ad210","modified":1530245657279},{"_id":"public/img/bg.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1530245657512},{"_id":"public/css/highlight.css","hash":"fb0403feb34cc8bb8b1f28f238540d36588b86df","modified":1530245657513},{"_id":"public/js/search.json.js","hash":"a0e8dfee9b9845aabd64360d497df7c0767b7235","modified":1530245657513},{"_id":"public/js/toctotop.js","hash":"ad6386bc746ff375715ca9da17af4716ea86e06a","modified":1530245657514},{"_id":"public/js/totop.js","hash":"5b1131830209c2daaf6fe34c5e39ab7c1059bfa4","modified":1530245657514},{"_id":"public/css/style.css","hash":"0b87f0674cad37ed4006f989cca7e1cd9f9568a3","modified":1530245657514},{"_id":"public/2018/06/19/hello-world.html","hash":"59b167ac59c596cdf99368602f42672adbaba4fe","modified":1530249540974},{"_id":"source/_posts/spring-cloud初步了解.md","hash":"3d79cca13b3683fe0a128624e94a2ee27abe870d","modified":1530252964698},{"_id":"source/_posts/JVM原/java-memory.jpg","hash":"60385605b5e88fd9a0dc45f429ad06c98c17bdc6","modified":1530182335395},{"_id":"source/_posts/JVM原/java-memory2.jpg","hash":"863ea04e441356616906435801b88ba298f749f7","modified":1530182335398},{"_id":"source/_posts/JVM原/java-stack.jpg","hash":"1f274c71b5aa93940059574fa8cf87379c677757","modified":1530182335395},{"_id":"source/_posts/JVM原/java-stack2.jpg","hash":"5f31530393b5f62a824dc15535ac29994fa37ab8","modified":1530182335395},{"_id":"source/_posts/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530253257622},{"_id":"source/_posts/spring-cloud初步了解/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1530253233804},{"_id":"source/_posts/JVM原/cpu.jpg","hash":"e3f2a3a314def53be767a0e47a732bd291e938de","modified":1530182335394},{"_id":"source/_posts/JVM原/eclipse-conf.jpg","hash":"c20d0f5d5f63f96c96f2ae0a5e0ba71430109871","modified":1530182335396},{"_id":"source/_posts/JVM原/memory.jpg","hash":"f44f8a01804b977ea8a25d871604e584b276d555","modified":1530182335397},{"_id":"public/spring-cloud初步了解.html","hash":"868250f19f75cc85dd54122a1577c2952fd71472","modified":1530260703280},{"_id":"public/hello-world.html","hash":"899d5164e0ac5e8cdc13ef92a1a033051b980206","modified":1530260703280},{"_id":"public/JVM原理.html","hash":"cc9af2febb5265c03e9ca8f113cfbd49b265c467","modified":1530260703280},{"_id":"source/img/.DS_Store","hash":"1be65ab13c43093c62cb8949a3fb8347dadf119c","modified":1530264504041},{"_id":"source/img/java-memory.jpg","hash":"60385605b5e88fd9a0dc45f429ad06c98c17bdc6","modified":1530182335395},{"_id":"source/img/java-memory2.jpg","hash":"863ea04e441356616906435801b88ba298f749f7","modified":1530182335398},{"_id":"source/img/java-stack.jpg","hash":"1f274c71b5aa93940059574fa8cf87379c677757","modified":1530182335395},{"_id":"source/img/java-stack2.jpg","hash":"5f31530393b5f62a824dc15535ac29994fa37ab8","modified":1530182335395},{"_id":"source/img/cpu.jpg","hash":"e3f2a3a314def53be767a0e47a732bd291e938de","modified":1530182335394},{"_id":"source/img/eclipse-conf.jpg","hash":"c20d0f5d5f63f96c96f2ae0a5e0ba71430109871","modified":1530182335396},{"_id":"source/img/memory.jpg","hash":"f44f8a01804b977ea8a25d871604e584b276d555","modified":1530182335397},{"_id":"public/articles/spring-cloud初步了解.html","hash":"666a657a7ad176c77605a2e6d1e3e26173445491","modified":1530264255149},{"_id":"public/articles/hello-world.html","hash":"520d543e5ae3b92be025ca17f38385b02a9d0bfd","modified":1530264255149},{"_id":"public/articles/JVM原理.html","hash":"98296369609bd5d3d37479b2b5b2eee34783ae79","modified":1530264255151},{"_id":"public/img/java-memory.jpg","hash":"60385605b5e88fd9a0dc45f429ad06c98c17bdc6","modified":1530262264582},{"_id":"public/img/java-memory2.jpg","hash":"863ea04e441356616906435801b88ba298f749f7","modified":1530262264582},{"_id":"public/img/java-stack.jpg","hash":"1f274c71b5aa93940059574fa8cf87379c677757","modified":1530262264582},{"_id":"public/img/java-stack2.jpg","hash":"5f31530393b5f62a824dc15535ac29994fa37ab8","modified":1530262264582},{"_id":"public/img/cpu.jpg","hash":"e3f2a3a314def53be767a0e47a732bd291e938de","modified":1530262264583},{"_id":"public/img/eclipse-conf.jpg","hash":"c20d0f5d5f63f96c96f2ae0a5e0ba71430109871","modified":1530262264583},{"_id":"public/img/memory.jpg","hash":"f44f8a01804b977ea8a25d871604e584b276d555","modified":1530262264584},{"_id":"source/icon.jpg","hash":"951b183a011308c90099a9922dce8cf3e011274c","modified":1530263164501},{"_id":"themes/BlueLake/.DS_Store","hash":"84bb89cf616f08b041089de3c6d606b7db9d7d0c","modified":1530264182377},{"_id":"themes/BlueLake/source/.DS_Store","hash":"9edec68bf5f5f3daf0d048b56a2badf88d4c27cf","modified":1530264185208},{"_id":"themes/BlueLake/source/css/source-code-pro.css","hash":"dfbd97c1a56a13dee35ae9585b6e40a5b6560dcf","modified":1530182335400},{"_id":"public/icon.jpg","hash":"951b183a011308c90099a9922dce8cf3e011274c","modified":1530264255152},{"_id":"public/css/source-code-pro.css","hash":"dfbd97c1a56a13dee35ae9585b6e40a5b6560dcf","modified":1530264255156},{"_id":"source/img/author.jpg","hash":"545cd198ba0e5359a82c77c1c8030f8e909dde4e","modified":1530264525054},{"_id":"public/img/author.jpg","hash":"545cd198ba0e5359a82c77c1c8030f8e909dde4e","modified":1530264560525}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-06-25T06:14:48.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-06-25 14:14:48\n---","updated":"2018-06-28T10:38:55.399Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjizgr5pd0001b2o6ecjp9q71","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JVM原理","date":"2018-06-19T08:26:57.000Z","_content":"## 内存\n我们知道，计算机CPU和内存的交互是最频繁的，内存是我们的高速缓存区，用户磁盘和CPU的交互，而CPU运转速度越来越快，磁盘远远跟不上CPU的读写速度，才设计了内存，用户缓冲用户IO等待导致CPU的等待成本，但是随着CPU的发展，内存的读写速度也远远跟不上CPU的读写速度，因此，为了解决这一纠纷，CPU厂商在每颗CPU上加入了高速缓存，用来缓解这种症状，因此，现在CPU同内存交互就变成了下面的样子。\n\n\n<img src=\"../img/cpu.jpg\"> \n\n\n同样，根据摩尔定律，我们知道单核CPU的主频不可能无限制的增长，要想很多的提升新能，需要多个处理器协同工作， Intel总裁的贝瑞特单膝下跪事件标志着多核时代的到来。\n\n基于高速缓存的存储交互很好的解决了处理器与内存之间的矛盾，也引入了新的问题：缓存一致性问题。在多处理器系统中，每个处理器有自己的高速缓存，而他们又共享同一块内存（下文成主存，main memory 主要内存），当多个处理器运算都涉及到同一块内存区域的时候，就有可能发生缓存不一致的现象。为了解决这一问题，需要各个处理器运行时都遵循一些协议，在运行时需要将这些协议保证数据的一致性。这类协议包括MSI、MESI、MOSI、Synapse、Firely、DragonProtocol等。如下图所示\n\n<img src=\"../img/memory.jpg\">\n\nJava虚拟机内存模型中定义的访问操作与物理计算机处理的基本一致！\n<img src=\"../img/java-memory.jpg\">\n\nJava中通过多线程机制使得多个任务同时执行处理，所有的线程共享JVM内存区域main memory，而每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理（操作码+操作数）。更多信息我们会在后面的《深入JVM—JVM类执行机制中详细解说》。\n在之前，我们也已经提到，JVM的逻辑内存模型如下：\n<img src=\"../img/java-memory2.jpg\">\n\n我们现在来逐个的看下每个到底是做什么的！\n\n1、程序计数器\n\n程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。如果线程正在执行的是一个Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java 虚拟机规范中没有规定任何OutOfMemoryError 情况的区域。\n\n2、Java 虚拟机栈\n\n与程序计数器一样，Java 虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame ①）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。经常有人把Java 内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗糙，Java 内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的“堆”在后面会专门讲述，而所指的“栈”就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress 类型（指向了一条字节码指令的地址）。其中64 位长度的long 和double 类型的数据会占用2 个局部变量空间（Slot），其余的数据类型只占用1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。在Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。\n\n3、本地方法栈\n\n本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError 和OutOfMemoryError异常。\n\n4、Java 堆\n\n对于大多数应用来说，Java 堆（Java Heap）是Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java 虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配①，但是随着JIT 编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换②优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（GarbageCollected Heap，幸好国内没翻译成“垃圾堆”）。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java 堆中还可以细分为：新生代和老年代；再细致一点的有Eden 空间、From Survivor 空间、To Survivor 空间等。如果从内存分配的角度看，线程共享的Java 堆中可能划分出多个线程私有的分配缓冲区（Thread LocalAllocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java 堆中的上述各个区域的分配和回收等细节将会是下一章的主题。根据Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。\n\n4、方法区\n\n方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。对于习惯在HotSpot 虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot 虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。即使是HotSpot 虚拟机本身，根据官方发布的路线图信息，现在也有放弃永久代并“搬家”至Native Memory 来实现方法区的规划了。Java 虚拟机规范对这个区域的限制非常宽松，除了和Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。在Sun 公司的BUG 列表中，曾出现过的若干个严重的BUG 就是由于低版本的HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。\n\n5、运行时常量池\n\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant PoolTable），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。Java 虚拟机对Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中①。运行时常量池相对于Class 文件常量池的另外一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String 类的intern() 方法。既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError 异常\n\n6、直接内存\n\n直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError 异常出现，所以我们放到这里一起讲解。在JDK 1.4 中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O 方式，它可以使用Native 函数库直接分配堆外内存，然后通过一个存储在Java 堆里面的DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java 堆和Native 堆中来回复制数据。显然，本机直接内存的分配不会受到Java 堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM 及SWAP 区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。\n\n逻辑内存模型我们已经看到了，那当我们建立一个对象的时候是怎么进行访问的呢？在Java 语言中，对象访问是如何进行的？对象访问在Java 语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java 栈、Java 堆、方法区这三个最重要内存区\n域之间的关联关系，如下面的这句代码：\n\n```\nObject obj = new Object();\n```\n假设这句代码出现在方法体中，那“Object obj”这部分的语义将会反映到Java 栈的本地变量表中，作为一个reference 类型数据出现。而“new Object()”这部分的语义将会反映到Java 堆中，形成一块存储了Object 类型所有实例数据值（Instance Data，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（Object Memory Layout）的不同，这块内存的长度是不固定的。另外，在Java 堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference 类型在Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。如果使用句柄访问方式，Java 堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如下图所示。\n<img src=\"../img/java-stack.jpg\">\n\n如果使用直接指针访问方式，Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference 中直接存储的就是对象地址，如下图所示\n\n<img src=\"../img/java-stack2.jpg\">\n\n这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference 中存\n储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference 本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java 中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机Sun HotSpot 而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。下面我们来看几个示例\n\n1、Java 堆溢出\n\n下面的程中我们限制Java 堆的大小为20MB，不可扩展（将堆的最小值-Xms 参数与最大值-Xmx 参数设置为一样即可避免堆自动扩展），通过参数-XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机在出现内存溢出异常时Dump 出当前的内存堆转储快照以便事后进行分析。\n参数设置如下\n<img src=\"../img/eclipse-conf.jpg\">\n\n```\npackage com.yhj.jvm.memory.heap;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @Described：堆溢出测试\n * @VM args:-verbose:gc -Xms20M -Xmx20M -XX:+PrintGCDetails\n * @author YHJ create at 2011-11-12 下午07:52:22\n * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java\n */\npublic class HeapOutOfMemory {\n    /**\n     * @param args\n     * @Author YHJ create at 2011-11-12 下午07:52:18\n     */\n    public static void main(String[] args) {\n       List<TestCase> cases = new ArrayList<TestCase>();\n       while(true){\n           cases.add(new TestCase());\n       }\n    }\n}\n\n/**\n * @Described：测试用例\n * @author YHJ create at 2011-11-12 下午07:55:50\n * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java\n */\nclass TestCase{\n}\n\n```\nJava 堆内存的OutOfMemoryError异常是实际应用中最常见的内存溢出异常情况。出现Java 堆内\n存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟着进一步提示“Java heap\n\nspace”。\n\n要解决这个区域的异常，一般的手段是首先通过内存映像分析工具（如Eclipse\n\nMemory Analyzer）对dump 出来的堆转储快照进行分析，重点是确认内存中的对象是\n\n否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢\n\n出（Memory Overflow）。图2-5 显示了使用Eclipse Memory Analyzer 打开的堆转储快\n\n照文件。\n\n如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots 的引用链。于是就\n\n能找到泄漏对象是通过怎样的路径与GC Roots 相关联并导致垃圾收集器无法自动回收\n\n它们的。掌握了泄漏对象的类型信息，以及GC Roots 引用链的信息，就可以比较准确\n\n地定位出泄漏代码的位置。\n\n如果不存在泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查\n\n虚拟机的堆参数（-Xmx 与-Xms），与机器物理内存对比看是否还可以调大，从代码上\n\n检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期\n\n的内存消耗。\n\n以上是处理Java 堆内存问题的简略思路，处理这些问题所需要的知识、工具与经验\n\n在后面的几次分享中我会做一些额外的分析。\n\n2、java栈溢出\n\n```\npackage com.yhj.jvm.memory.stack;\n\n/**\n * @Described：栈层级不足探究\n * @VM args:-Xss128k\n * @author YHJ create at 2011-11-12 下午08:19:28\n * @FileNmae com.yhj.jvm.memory.stack.StackOverFlow.java\n */\npublic class StackOverFlow {\n    private int i ;\n    public void plus() {\n       i++;\n       plus();\n    }\n    \n    /**\n     * @param args\n     * @Author YHJ create at 2011-11-12 下午08:19:21\n     */\n    public static void main(String[] args) {\n       StackOverFlow stackOverFlow = new StackOverFlow();\n       try {\n           stackOverFlow.plus();\n       } catch (Exception e) {\n           System.out.println(\"Exception:stack length:\"+stackOverFlow.i);\n           e.printStackTrace();\n       } catch (Error e) {\n           System.out.println(\"Error:stack length:\"+stackOverFlow.i);\n           e.printStackTrace();\n       }\n    }\n}\n```\n3、常量池溢出（常量池都有哪些信息，我们在后续的JVM类文件结构中详细描述）\n\n```\npackage com.yhj.jvm.memory.constant;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @Described：常量池内存溢出探究\n * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M\n * @author YHJ create at 2011-10-30 下午04:28:30\n * @FileNmae com.yhj.jvm.memory.constant.ConstantOutOfMemory.java\n */\npublic class ConstantOutOfMemory {\n    /**\n     * @param args\n     * @throws Exception\n     * @Author YHJ create at 2011-10-30 下午04:28:25\n     */\n    public static void main(String[] args) throws Exception {\n       try {\n           List<String> strings = new ArrayList<String>();\n           int i = 0;\n           while(true){\n              strings.add(String.valueOf(i++).intern());\n           }\n       } catch (Exception e) {\n           e.printStackTrace();\n           throw e;\n       }\n    }\n}\n```\n4、方法去溢出\n\n```\npackage com.yhj.jvm.memory.methodArea;\nimport java.lang.reflect.Method;\nimport net.sf.cglib.proxy.Enhancer;\nimport net.sf.cglib.proxy.MethodInterceptor;\nimport net.sf.cglib.proxy.MethodProxy;\n\n/**\n * @Described：方法区溢出测试\n * 使用技术 CBlib\n * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M\n * @author YHJ create at 2011-11-12 下午08:47:55\n * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java\n */\n\npublic class MethodAreaOutOfMemory {\n\n    /**\n     * @param args\n     * @Author YHJ create at 2011-11-12 下午08:47:51\n     */\n    public static void main(String[] args) {\n       while(true){\n           Enhancer enhancer = new Enhancer();\n           enhancer.setSuperclass(TestCase.class);\n           enhancer.setUseCache(false);\n           enhancer.setCallback(new MethodInterceptor() {\n              @Override\n              public Object intercept(Object arg0, Method arg1, Object[] arg2,\n                  MethodProxy arg3) throws Throwable {\n                  return arg3.invokeSuper(arg0, arg2);\n              }\n           });\n           enhancer.create();\n       }\n    }\n}\n\n/**\n * @Described：测试用例\n * @author YHJ create at 2011-11-12 下午08:53:09\n * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java\n */\nclass TestCase{\n}\n```\n5、直接内存溢出\n\n```\npackage com.yhj.jvm.memory.directoryMemory;\nimport java.lang.reflect.Field;\nimport sun.misc.Unsafe;\n\n/**\n * @Described：直接内存溢出测试\n * @VM args: -Xmx20M -XX:MaxDirectMemorySize=10M\n * @author YHJ create at 2011-11-12 下午09:06:10\n * @FileNmae \n */\npublic class DirectoryMemoryOutOfmemory {\n    private static final int ONE_MB = 1024*1024;\n    private static int count = 1;\n    \n    /**\n     * @param args\n     * @Author YHJ create at 2011-11-12 下午09:05:54\n     */\n    public static void main(String[] args) {\n       try {\n           Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");\n           field.setAccessible(true);\n           Unsafe unsafe = (Unsafe) field.get(null);\n           while (true) {\n              unsafe.allocateMemory(ONE_MB);\n              count++;\n           }\n       } catch (Exception e) {\n           System.out.println(\"Exception:instance created \"+count);\n           e.printStackTrace();\n       } catch (Error e) {\n           System.out.println(\"Error:instance created \"+count);\n           e.printStackTrace();\n       }\n    }\n}\n\n```\n\n\n ","source":"_posts/JVM原理.md","raw":"---\ntitle: JVM原理\ndate: 2018-06-19 16:26:57\ntags:\n  - Jvm\n  - 原理\n---\n## 内存\n我们知道，计算机CPU和内存的交互是最频繁的，内存是我们的高速缓存区，用户磁盘和CPU的交互，而CPU运转速度越来越快，磁盘远远跟不上CPU的读写速度，才设计了内存，用户缓冲用户IO等待导致CPU的等待成本，但是随着CPU的发展，内存的读写速度也远远跟不上CPU的读写速度，因此，为了解决这一纠纷，CPU厂商在每颗CPU上加入了高速缓存，用来缓解这种症状，因此，现在CPU同内存交互就变成了下面的样子。\n\n\n<img src=\"../img/cpu.jpg\"> \n\n\n同样，根据摩尔定律，我们知道单核CPU的主频不可能无限制的增长，要想很多的提升新能，需要多个处理器协同工作， Intel总裁的贝瑞特单膝下跪事件标志着多核时代的到来。\n\n基于高速缓存的存储交互很好的解决了处理器与内存之间的矛盾，也引入了新的问题：缓存一致性问题。在多处理器系统中，每个处理器有自己的高速缓存，而他们又共享同一块内存（下文成主存，main memory 主要内存），当多个处理器运算都涉及到同一块内存区域的时候，就有可能发生缓存不一致的现象。为了解决这一问题，需要各个处理器运行时都遵循一些协议，在运行时需要将这些协议保证数据的一致性。这类协议包括MSI、MESI、MOSI、Synapse、Firely、DragonProtocol等。如下图所示\n\n<img src=\"../img/memory.jpg\">\n\nJava虚拟机内存模型中定义的访问操作与物理计算机处理的基本一致！\n<img src=\"../img/java-memory.jpg\">\n\nJava中通过多线程机制使得多个任务同时执行处理，所有的线程共享JVM内存区域main memory，而每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理（操作码+操作数）。更多信息我们会在后面的《深入JVM—JVM类执行机制中详细解说》。\n在之前，我们也已经提到，JVM的逻辑内存模型如下：\n<img src=\"../img/java-memory2.jpg\">\n\n我们现在来逐个的看下每个到底是做什么的！\n\n1、程序计数器\n\n程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。如果线程正在执行的是一个Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java 虚拟机规范中没有规定任何OutOfMemoryError 情况的区域。\n\n2、Java 虚拟机栈\n\n与程序计数器一样，Java 虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame ①）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。经常有人把Java 内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗糙，Java 内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的“堆”在后面会专门讲述，而所指的“栈”就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress 类型（指向了一条字节码指令的地址）。其中64 位长度的long 和double 类型的数据会占用2 个局部变量空间（Slot），其余的数据类型只占用1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。在Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。\n\n3、本地方法栈\n\n本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError 和OutOfMemoryError异常。\n\n4、Java 堆\n\n对于大多数应用来说，Java 堆（Java Heap）是Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java 虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配①，但是随着JIT 编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换②优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（GarbageCollected Heap，幸好国内没翻译成“垃圾堆”）。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java 堆中还可以细分为：新生代和老年代；再细致一点的有Eden 空间、From Survivor 空间、To Survivor 空间等。如果从内存分配的角度看，线程共享的Java 堆中可能划分出多个线程私有的分配缓冲区（Thread LocalAllocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java 堆中的上述各个区域的分配和回收等细节将会是下一章的主题。根据Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。\n\n4、方法区\n\n方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。对于习惯在HotSpot 虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot 虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。即使是HotSpot 虚拟机本身，根据官方发布的路线图信息，现在也有放弃永久代并“搬家”至Native Memory 来实现方法区的规划了。Java 虚拟机规范对这个区域的限制非常宽松，除了和Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。在Sun 公司的BUG 列表中，曾出现过的若干个严重的BUG 就是由于低版本的HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。\n\n5、运行时常量池\n\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant PoolTable），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。Java 虚拟机对Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中①。运行时常量池相对于Class 文件常量池的另外一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String 类的intern() 方法。既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError 异常\n\n6、直接内存\n\n直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError 异常出现，所以我们放到这里一起讲解。在JDK 1.4 中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O 方式，它可以使用Native 函数库直接分配堆外内存，然后通过一个存储在Java 堆里面的DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java 堆和Native 堆中来回复制数据。显然，本机直接内存的分配不会受到Java 堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM 及SWAP 区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。\n\n逻辑内存模型我们已经看到了，那当我们建立一个对象的时候是怎么进行访问的呢？在Java 语言中，对象访问是如何进行的？对象访问在Java 语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java 栈、Java 堆、方法区这三个最重要内存区\n域之间的关联关系，如下面的这句代码：\n\n```\nObject obj = new Object();\n```\n假设这句代码出现在方法体中，那“Object obj”这部分的语义将会反映到Java 栈的本地变量表中，作为一个reference 类型数据出现。而“new Object()”这部分的语义将会反映到Java 堆中，形成一块存储了Object 类型所有实例数据值（Instance Data，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（Object Memory Layout）的不同，这块内存的长度是不固定的。另外，在Java 堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference 类型在Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。如果使用句柄访问方式，Java 堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如下图所示。\n<img src=\"../img/java-stack.jpg\">\n\n如果使用直接指针访问方式，Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference 中直接存储的就是对象地址，如下图所示\n\n<img src=\"../img/java-stack2.jpg\">\n\n这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference 中存\n储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference 本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java 中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机Sun HotSpot 而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。下面我们来看几个示例\n\n1、Java 堆溢出\n\n下面的程中我们限制Java 堆的大小为20MB，不可扩展（将堆的最小值-Xms 参数与最大值-Xmx 参数设置为一样即可避免堆自动扩展），通过参数-XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机在出现内存溢出异常时Dump 出当前的内存堆转储快照以便事后进行分析。\n参数设置如下\n<img src=\"../img/eclipse-conf.jpg\">\n\n```\npackage com.yhj.jvm.memory.heap;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @Described：堆溢出测试\n * @VM args:-verbose:gc -Xms20M -Xmx20M -XX:+PrintGCDetails\n * @author YHJ create at 2011-11-12 下午07:52:22\n * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java\n */\npublic class HeapOutOfMemory {\n    /**\n     * @param args\n     * @Author YHJ create at 2011-11-12 下午07:52:18\n     */\n    public static void main(String[] args) {\n       List<TestCase> cases = new ArrayList<TestCase>();\n       while(true){\n           cases.add(new TestCase());\n       }\n    }\n}\n\n/**\n * @Described：测试用例\n * @author YHJ create at 2011-11-12 下午07:55:50\n * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java\n */\nclass TestCase{\n}\n\n```\nJava 堆内存的OutOfMemoryError异常是实际应用中最常见的内存溢出异常情况。出现Java 堆内\n存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟着进一步提示“Java heap\n\nspace”。\n\n要解决这个区域的异常，一般的手段是首先通过内存映像分析工具（如Eclipse\n\nMemory Analyzer）对dump 出来的堆转储快照进行分析，重点是确认内存中的对象是\n\n否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢\n\n出（Memory Overflow）。图2-5 显示了使用Eclipse Memory Analyzer 打开的堆转储快\n\n照文件。\n\n如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots 的引用链。于是就\n\n能找到泄漏对象是通过怎样的路径与GC Roots 相关联并导致垃圾收集器无法自动回收\n\n它们的。掌握了泄漏对象的类型信息，以及GC Roots 引用链的信息，就可以比较准确\n\n地定位出泄漏代码的位置。\n\n如果不存在泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查\n\n虚拟机的堆参数（-Xmx 与-Xms），与机器物理内存对比看是否还可以调大，从代码上\n\n检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期\n\n的内存消耗。\n\n以上是处理Java 堆内存问题的简略思路，处理这些问题所需要的知识、工具与经验\n\n在后面的几次分享中我会做一些额外的分析。\n\n2、java栈溢出\n\n```\npackage com.yhj.jvm.memory.stack;\n\n/**\n * @Described：栈层级不足探究\n * @VM args:-Xss128k\n * @author YHJ create at 2011-11-12 下午08:19:28\n * @FileNmae com.yhj.jvm.memory.stack.StackOverFlow.java\n */\npublic class StackOverFlow {\n    private int i ;\n    public void plus() {\n       i++;\n       plus();\n    }\n    \n    /**\n     * @param args\n     * @Author YHJ create at 2011-11-12 下午08:19:21\n     */\n    public static void main(String[] args) {\n       StackOverFlow stackOverFlow = new StackOverFlow();\n       try {\n           stackOverFlow.plus();\n       } catch (Exception e) {\n           System.out.println(\"Exception:stack length:\"+stackOverFlow.i);\n           e.printStackTrace();\n       } catch (Error e) {\n           System.out.println(\"Error:stack length:\"+stackOverFlow.i);\n           e.printStackTrace();\n       }\n    }\n}\n```\n3、常量池溢出（常量池都有哪些信息，我们在后续的JVM类文件结构中详细描述）\n\n```\npackage com.yhj.jvm.memory.constant;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @Described：常量池内存溢出探究\n * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M\n * @author YHJ create at 2011-10-30 下午04:28:30\n * @FileNmae com.yhj.jvm.memory.constant.ConstantOutOfMemory.java\n */\npublic class ConstantOutOfMemory {\n    /**\n     * @param args\n     * @throws Exception\n     * @Author YHJ create at 2011-10-30 下午04:28:25\n     */\n    public static void main(String[] args) throws Exception {\n       try {\n           List<String> strings = new ArrayList<String>();\n           int i = 0;\n           while(true){\n              strings.add(String.valueOf(i++).intern());\n           }\n       } catch (Exception e) {\n           e.printStackTrace();\n           throw e;\n       }\n    }\n}\n```\n4、方法去溢出\n\n```\npackage com.yhj.jvm.memory.methodArea;\nimport java.lang.reflect.Method;\nimport net.sf.cglib.proxy.Enhancer;\nimport net.sf.cglib.proxy.MethodInterceptor;\nimport net.sf.cglib.proxy.MethodProxy;\n\n/**\n * @Described：方法区溢出测试\n * 使用技术 CBlib\n * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M\n * @author YHJ create at 2011-11-12 下午08:47:55\n * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java\n */\n\npublic class MethodAreaOutOfMemory {\n\n    /**\n     * @param args\n     * @Author YHJ create at 2011-11-12 下午08:47:51\n     */\n    public static void main(String[] args) {\n       while(true){\n           Enhancer enhancer = new Enhancer();\n           enhancer.setSuperclass(TestCase.class);\n           enhancer.setUseCache(false);\n           enhancer.setCallback(new MethodInterceptor() {\n              @Override\n              public Object intercept(Object arg0, Method arg1, Object[] arg2,\n                  MethodProxy arg3) throws Throwable {\n                  return arg3.invokeSuper(arg0, arg2);\n              }\n           });\n           enhancer.create();\n       }\n    }\n}\n\n/**\n * @Described：测试用例\n * @author YHJ create at 2011-11-12 下午08:53:09\n * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java\n */\nclass TestCase{\n}\n```\n5、直接内存溢出\n\n```\npackage com.yhj.jvm.memory.directoryMemory;\nimport java.lang.reflect.Field;\nimport sun.misc.Unsafe;\n\n/**\n * @Described：直接内存溢出测试\n * @VM args: -Xmx20M -XX:MaxDirectMemorySize=10M\n * @author YHJ create at 2011-11-12 下午09:06:10\n * @FileNmae \n */\npublic class DirectoryMemoryOutOfmemory {\n    private static final int ONE_MB = 1024*1024;\n    private static int count = 1;\n    \n    /**\n     * @param args\n     * @Author YHJ create at 2011-11-12 下午09:05:54\n     */\n    public static void main(String[] args) {\n       try {\n           Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");\n           field.setAccessible(true);\n           Unsafe unsafe = (Unsafe) field.get(null);\n           while (true) {\n              unsafe.allocateMemory(ONE_MB);\n              count++;\n           }\n       } catch (Exception e) {\n           System.out.println(\"Exception:instance created \"+count);\n           e.printStackTrace();\n       } catch (Error e) {\n           System.out.println(\"Error:instance created \"+count);\n           e.printStackTrace();\n       }\n    }\n}\n\n```\n\n\n ","slug":"JVM原理","published":1,"updated":"2018-06-29T09:20:33.913Z","_id":"cjizgr5p90000b2o6vjt5jcmz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>我们知道，计算机CPU和内存的交互是最频繁的，内存是我们的高速缓存区，用户磁盘和CPU的交互，而CPU运转速度越来越快，磁盘远远跟不上CPU的读写速度，才设计了内存，用户缓冲用户IO等待导致CPU的等待成本，但是随着CPU的发展，内存的读写速度也远远跟不上CPU的读写速度，因此，为了解决这一纠纷，CPU厂商在每颗CPU上加入了高速缓存，用来缓解这种症状，因此，现在CPU同内存交互就变成了下面的样子。</p>\n<p><img src=\"../img/cpu.jpg\"> </p>\n<p>同样，根据摩尔定律，我们知道单核CPU的主频不可能无限制的增长，要想很多的提升新能，需要多个处理器协同工作， Intel总裁的贝瑞特单膝下跪事件标志着多核时代的到来。</p>\n<p>基于高速缓存的存储交互很好的解决了处理器与内存之间的矛盾，也引入了新的问题：缓存一致性问题。在多处理器系统中，每个处理器有自己的高速缓存，而他们又共享同一块内存（下文成主存，main memory 主要内存），当多个处理器运算都涉及到同一块内存区域的时候，就有可能发生缓存不一致的现象。为了解决这一问题，需要各个处理器运行时都遵循一些协议，在运行时需要将这些协议保证数据的一致性。这类协议包括MSI、MESI、MOSI、Synapse、Firely、DragonProtocol等。如下图所示</p>\n<p><img src=\"../img/memory.jpg\"></p>\n<p>Java虚拟机内存模型中定义的访问操作与物理计算机处理的基本一致！<br><img src=\"../img/java-memory.jpg\"></p>\n<p>Java中通过多线程机制使得多个任务同时执行处理，所有的线程共享JVM内存区域main memory，而每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理（操作码+操作数）。更多信息我们会在后面的《深入JVM—JVM类执行机制中详细解说》。<br>在之前，我们也已经提到，JVM的逻辑内存模型如下：<br><img src=\"../img/java-memory2.jpg\"></p>\n<p>我们现在来逐个的看下每个到底是做什么的！</p>\n<p>1、程序计数器</p>\n<p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。如果线程正在执行的是一个Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java 虚拟机规范中没有规定任何OutOfMemoryError 情况的区域。</p>\n<p>2、Java 虚拟机栈</p>\n<p>与程序计数器一样，Java 虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame ①）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。经常有人把Java 内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗糙，Java 内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的“堆”在后面会专门讲述，而所指的“栈”就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress 类型（指向了一条字节码指令的地址）。其中64 位长度的long 和double 类型的数据会占用2 个局部变量空间（Slot），其余的数据类型只占用1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。在Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。</p>\n<p>3、本地方法栈</p>\n<p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError 和OutOfMemoryError异常。</p>\n<p>4、Java 堆</p>\n<p>对于大多数应用来说，Java 堆（Java Heap）是Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java 虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配①，但是随着JIT 编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换②优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（GarbageCollected Heap，幸好国内没翻译成“垃圾堆”）。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java 堆中还可以细分为：新生代和老年代；再细致一点的有Eden 空间、From Survivor 空间、To Survivor 空间等。如果从内存分配的角度看，线程共享的Java 堆中可能划分出多个线程私有的分配缓冲区（Thread LocalAllocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java 堆中的上述各个区域的分配和回收等细节将会是下一章的主题。根据Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。</p>\n<p>4、方法区</p>\n<p>方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。对于习惯在HotSpot 虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot 虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。即使是HotSpot 虚拟机本身，根据官方发布的路线图信息，现在也有放弃永久代并“搬家”至Native Memory 来实现方法区的规划了。Java 虚拟机规范对这个区域的限制非常宽松，除了和Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。在Sun 公司的BUG 列表中，曾出现过的若干个严重的BUG 就是由于低版本的HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。</p>\n<p>5、运行时常量池</p>\n<p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant PoolTable），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。Java 虚拟机对Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中①。运行时常量池相对于Class 文件常量池的另外一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String 类的intern() 方法。既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError 异常</p>\n<p>6、直接内存</p>\n<p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError 异常出现，所以我们放到这里一起讲解。在JDK 1.4 中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O 方式，它可以使用Native 函数库直接分配堆外内存，然后通过一个存储在Java 堆里面的DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java 堆和Native 堆中来回复制数据。显然，本机直接内存的分配不会受到Java 堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM 及SWAP 区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。</p>\n<p>逻辑内存模型我们已经看到了，那当我们建立一个对象的时候是怎么进行访问的呢？在Java 语言中，对象访问是如何进行的？对象访问在Java 语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java 栈、Java 堆、方法区这三个最重要内存区<br>域之间的关联关系，如下面的这句代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object obj = new Object();</span><br></pre></td></tr></table></figure>\n<p>假设这句代码出现在方法体中，那“Object obj”这部分的语义将会反映到Java 栈的本地变量表中，作为一个reference 类型数据出现。而“new Object()”这部分的语义将会反映到Java 堆中，形成一块存储了Object 类型所有实例数据值（Instance Data，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（Object Memory Layout）的不同，这块内存的长度是不固定的。另外，在Java 堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference 类型在Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。如果使用句柄访问方式，Java 堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如下图所示。<br><img src=\"../img/java-stack.jpg\"></p>\n<p>如果使用直接指针访问方式，Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference 中直接存储的就是对象地址，如下图所示</p>\n<p><img src=\"../img/java-stack2.jpg\"></p>\n<p>这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference 中存<br>储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference 本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java 中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机Sun HotSpot 而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。下面我们来看几个示例</p>\n<p>1、Java 堆溢出</p>\n<p>下面的程中我们限制Java 堆的大小为20MB，不可扩展（将堆的最小值-Xms 参数与最大值-Xmx 参数设置为一样即可避免堆自动扩展），通过参数-XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机在出现内存溢出异常时Dump 出当前的内存堆转储快照以便事后进行分析。<br>参数设置如下<br><img src=\"../img/eclipse-conf.jpg\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.heap;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：堆溢出测试</span><br><span class=\"line\"> * @VM args:-verbose:gc -Xms20M -Xmx20M -XX:+PrintGCDetails</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午07:52:22</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HeapOutOfMemory &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @Author YHJ create at 2011-11-12 下午07:52:18</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">       List&lt;TestCase&gt; cases = new ArrayList&lt;TestCase&gt;();</span><br><span class=\"line\">       while(true)&#123;</span><br><span class=\"line\">           cases.add(new TestCase());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：测试用例</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午07:55:50</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">class TestCase&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Java 堆内存的OutOfMemoryError异常是实际应用中最常见的内存溢出异常情况。出现Java 堆内<br>存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟着进一步提示“Java heap</p>\n<p>space”。</p>\n<p>要解决这个区域的异常，一般的手段是首先通过内存映像分析工具（如Eclipse</p>\n<p>Memory Analyzer）对dump 出来的堆转储快照进行分析，重点是确认内存中的对象是</p>\n<p>否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢</p>\n<p>出（Memory Overflow）。图2-5 显示了使用Eclipse Memory Analyzer 打开的堆转储快</p>\n<p>照文件。</p>\n<p>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots 的引用链。于是就</p>\n<p>能找到泄漏对象是通过怎样的路径与GC Roots 相关联并导致垃圾收集器无法自动回收</p>\n<p>它们的。掌握了泄漏对象的类型信息，以及GC Roots 引用链的信息，就可以比较准确</p>\n<p>地定位出泄漏代码的位置。</p>\n<p>如果不存在泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查</p>\n<p>虚拟机的堆参数（-Xmx 与-Xms），与机器物理内存对比看是否还可以调大，从代码上</p>\n<p>检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期</p>\n<p>的内存消耗。</p>\n<p>以上是处理Java 堆内存问题的简略思路，处理这些问题所需要的知识、工具与经验</p>\n<p>在后面的几次分享中我会做一些额外的分析。</p>\n<p>2、java栈溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.stack;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：栈层级不足探究</span><br><span class=\"line\"> * @VM args:-Xss128k</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午08:19:28</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.stack.StackOverFlow.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class StackOverFlow &#123;</span><br><span class=\"line\">    private int i ;</span><br><span class=\"line\">    public void plus() &#123;</span><br><span class=\"line\">       i++;</span><br><span class=\"line\">       plus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @Author YHJ create at 2011-11-12 下午08:19:21</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">       StackOverFlow stackOverFlow = new StackOverFlow();</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           stackOverFlow.plus();</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(&quot;Exception:stack length:&quot;+stackOverFlow.i);</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; catch (Error e) &#123;</span><br><span class=\"line\">           System.out.println(&quot;Error:stack length:&quot;+stackOverFlow.i);</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、常量池溢出（常量池都有哪些信息，我们在后续的JVM类文件结构中详细描述）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.constant;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：常量池内存溢出探究</span><br><span class=\"line\"> * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class=\"line\"> * @author YHJ create at 2011-10-30 下午04:28:30</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.constant.ConstantOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ConstantOutOfMemory &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @throws Exception</span><br><span class=\"line\">     * @Author YHJ create at 2011-10-30 下午04:28:25</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           List&lt;String&gt; strings = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">           int i = 0;</span><br><span class=\"line\">           while(true)&#123;</span><br><span class=\"line\">              strings.add(String.valueOf(i++).intern());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">           throw e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、方法去溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.methodArea;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\">import net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\">import net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：方法区溢出测试</span><br><span class=\"line\"> * 使用技术 CBlib</span><br><span class=\"line\"> * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午08:47:55</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public class MethodAreaOutOfMemory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @Author YHJ create at 2011-11-12 下午08:47:51</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">       while(true)&#123;</span><br><span class=\"line\">           Enhancer enhancer = new Enhancer();</span><br><span class=\"line\">           enhancer.setSuperclass(TestCase.class);</span><br><span class=\"line\">           enhancer.setUseCache(false);</span><br><span class=\"line\">           enhancer.setCallback(new MethodInterceptor() &#123;</span><br><span class=\"line\">              @Override</span><br><span class=\"line\">              public Object intercept(Object arg0, Method arg1, Object[] arg2,</span><br><span class=\"line\">                  MethodProxy arg3) throws Throwable &#123;</span><br><span class=\"line\">                  return arg3.invokeSuper(arg0, arg2);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">           enhancer.create();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：测试用例</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午08:53:09</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">class TestCase&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、直接内存溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.directoryMemory;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import sun.misc.Unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：直接内存溢出测试</span><br><span class=\"line\"> * @VM args: -Xmx20M -XX:MaxDirectMemorySize=10M</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午09:06:10</span><br><span class=\"line\"> * @FileNmae </span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DirectoryMemoryOutOfmemory &#123;</span><br><span class=\"line\">    private static final int ONE_MB = 1024*1024;</span><br><span class=\"line\">    private static int count = 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @Author YHJ create at 2011-11-12 下午09:05:54</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class=\"line\">           field.setAccessible(true);</span><br><span class=\"line\">           Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class=\"line\">           while (true) &#123;</span><br><span class=\"line\">              unsafe.allocateMemory(ONE_MB);</span><br><span class=\"line\">              count++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(&quot;Exception:instance created &quot;+count);</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; catch (Error e) &#123;</span><br><span class=\"line\">           System.out.println(&quot;Error:instance created &quot;+count);</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h2><p>我们知道，计算机CPU和内存的交互是最频繁的，内存是我们的高速缓存区，用户磁盘和CPU的交互，而CPU运转速度越来越快，磁盘远远跟不上CPU的读写速度，才设计了内存，用户缓冲用户IO等待导致CPU的等待成本，但是随着CPU的发展，内存的读写速度也远远跟不上CPU的读写速度，因此，为了解决这一纠纷，CPU厂商在每颗CPU上加入了高速缓存，用来缓解这种症状，因此，现在CPU同内存交互就变成了下面的样子。</p>\n<p><img src=\"../img/cpu.jpg\"> </p>\n<p>同样，根据摩尔定律，我们知道单核CPU的主频不可能无限制的增长，要想很多的提升新能，需要多个处理器协同工作， Intel总裁的贝瑞特单膝下跪事件标志着多核时代的到来。</p>\n<p>基于高速缓存的存储交互很好的解决了处理器与内存之间的矛盾，也引入了新的问题：缓存一致性问题。在多处理器系统中，每个处理器有自己的高速缓存，而他们又共享同一块内存（下文成主存，main memory 主要内存），当多个处理器运算都涉及到同一块内存区域的时候，就有可能发生缓存不一致的现象。为了解决这一问题，需要各个处理器运行时都遵循一些协议，在运行时需要将这些协议保证数据的一致性。这类协议包括MSI、MESI、MOSI、Synapse、Firely、DragonProtocol等。如下图所示</p>\n<p><img src=\"../img/memory.jpg\"></p>\n<p>Java虚拟机内存模型中定义的访问操作与物理计算机处理的基本一致！<br><img src=\"../img/java-memory.jpg\"></p>\n<p>Java中通过多线程机制使得多个任务同时执行处理，所有的线程共享JVM内存区域main memory，而每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理（操作码+操作数）。更多信息我们会在后面的《深入JVM—JVM类执行机制中详细解说》。<br>在之前，我们也已经提到，JVM的逻辑内存模型如下：<br><img src=\"../img/java-memory2.jpg\"></p>\n<p>我们现在来逐个的看下每个到底是做什么的！</p>\n<p>1、程序计数器</p>\n<p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。如果线程正在执行的是一个Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java 虚拟机规范中没有规定任何OutOfMemoryError 情况的区域。</p>\n<p>2、Java 虚拟机栈</p>\n<p>与程序计数器一样，Java 虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame ①）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。经常有人把Java 内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗糙，Java 内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的“堆”在后面会专门讲述，而所指的“栈”就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress 类型（指向了一条字节码指令的地址）。其中64 位长度的long 和double 类型的数据会占用2 个局部变量空间（Slot），其余的数据类型只占用1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。在Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。</p>\n<p>3、本地方法栈</p>\n<p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError 和OutOfMemoryError异常。</p>\n<p>4、Java 堆</p>\n<p>对于大多数应用来说，Java 堆（Java Heap）是Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java 虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配①，但是随着JIT 编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换②优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（GarbageCollected Heap，幸好国内没翻译成“垃圾堆”）。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java 堆中还可以细分为：新生代和老年代；再细致一点的有Eden 空间、From Survivor 空间、To Survivor 空间等。如果从内存分配的角度看，线程共享的Java 堆中可能划分出多个线程私有的分配缓冲区（Thread LocalAllocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java 堆中的上述各个区域的分配和回收等细节将会是下一章的主题。根据Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。</p>\n<p>4、方法区</p>\n<p>方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。对于习惯在HotSpot 虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot 虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。即使是HotSpot 虚拟机本身，根据官方发布的路线图信息，现在也有放弃永久代并“搬家”至Native Memory 来实现方法区的规划了。Java 虚拟机规范对这个区域的限制非常宽松，除了和Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。在Sun 公司的BUG 列表中，曾出现过的若干个严重的BUG 就是由于低版本的HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。</p>\n<p>5、运行时常量池</p>\n<p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant PoolTable），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。Java 虚拟机对Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中①。运行时常量池相对于Class 文件常量池的另外一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String 类的intern() 方法。既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError 异常</p>\n<p>6、直接内存</p>\n<p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError 异常出现，所以我们放到这里一起讲解。在JDK 1.4 中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O 方式，它可以使用Native 函数库直接分配堆外内存，然后通过一个存储在Java 堆里面的DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java 堆和Native 堆中来回复制数据。显然，本机直接内存的分配不会受到Java 堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM 及SWAP 区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。</p>\n<p>逻辑内存模型我们已经看到了，那当我们建立一个对象的时候是怎么进行访问的呢？在Java 语言中，对象访问是如何进行的？对象访问在Java 语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java 栈、Java 堆、方法区这三个最重要内存区<br>域之间的关联关系，如下面的这句代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object obj = new Object();</span><br></pre></td></tr></table></figure>\n<p>假设这句代码出现在方法体中，那“Object obj”这部分的语义将会反映到Java 栈的本地变量表中，作为一个reference 类型数据出现。而“new Object()”这部分的语义将会反映到Java 堆中，形成一块存储了Object 类型所有实例数据值（Instance Data，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（Object Memory Layout）的不同，这块内存的长度是不固定的。另外，在Java 堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference 类型在Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。如果使用句柄访问方式，Java 堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如下图所示。<br><img src=\"../img/java-stack.jpg\"></p>\n<p>如果使用直接指针访问方式，Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference 中直接存储的就是对象地址，如下图所示</p>\n<p><img src=\"../img/java-stack2.jpg\"></p>\n<p>这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference 中存<br>储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference 本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java 中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机Sun HotSpot 而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。下面我们来看几个示例</p>\n<p>1、Java 堆溢出</p>\n<p>下面的程中我们限制Java 堆的大小为20MB，不可扩展（将堆的最小值-Xms 参数与最大值-Xmx 参数设置为一样即可避免堆自动扩展），通过参数-XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机在出现内存溢出异常时Dump 出当前的内存堆转储快照以便事后进行分析。<br>参数设置如下<br><img src=\"../img/eclipse-conf.jpg\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.heap;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：堆溢出测试</span><br><span class=\"line\"> * @VM args:-verbose:gc -Xms20M -Xmx20M -XX:+PrintGCDetails</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午07:52:22</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class HeapOutOfMemory &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @Author YHJ create at 2011-11-12 下午07:52:18</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">       List&lt;TestCase&gt; cases = new ArrayList&lt;TestCase&gt;();</span><br><span class=\"line\">       while(true)&#123;</span><br><span class=\"line\">           cases.add(new TestCase());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：测试用例</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午07:55:50</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">class TestCase&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Java 堆内存的OutOfMemoryError异常是实际应用中最常见的内存溢出异常情况。出现Java 堆内<br>存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟着进一步提示“Java heap</p>\n<p>space”。</p>\n<p>要解决这个区域的异常，一般的手段是首先通过内存映像分析工具（如Eclipse</p>\n<p>Memory Analyzer）对dump 出来的堆转储快照进行分析，重点是确认内存中的对象是</p>\n<p>否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢</p>\n<p>出（Memory Overflow）。图2-5 显示了使用Eclipse Memory Analyzer 打开的堆转储快</p>\n<p>照文件。</p>\n<p>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots 的引用链。于是就</p>\n<p>能找到泄漏对象是通过怎样的路径与GC Roots 相关联并导致垃圾收集器无法自动回收</p>\n<p>它们的。掌握了泄漏对象的类型信息，以及GC Roots 引用链的信息，就可以比较准确</p>\n<p>地定位出泄漏代码的位置。</p>\n<p>如果不存在泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查</p>\n<p>虚拟机的堆参数（-Xmx 与-Xms），与机器物理内存对比看是否还可以调大，从代码上</p>\n<p>检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期</p>\n<p>的内存消耗。</p>\n<p>以上是处理Java 堆内存问题的简略思路，处理这些问题所需要的知识、工具与经验</p>\n<p>在后面的几次分享中我会做一些额外的分析。</p>\n<p>2、java栈溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.stack;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：栈层级不足探究</span><br><span class=\"line\"> * @VM args:-Xss128k</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午08:19:28</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.stack.StackOverFlow.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class StackOverFlow &#123;</span><br><span class=\"line\">    private int i ;</span><br><span class=\"line\">    public void plus() &#123;</span><br><span class=\"line\">       i++;</span><br><span class=\"line\">       plus();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @Author YHJ create at 2011-11-12 下午08:19:21</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">       StackOverFlow stackOverFlow = new StackOverFlow();</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           stackOverFlow.plus();</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(&quot;Exception:stack length:&quot;+stackOverFlow.i);</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; catch (Error e) &#123;</span><br><span class=\"line\">           System.out.println(&quot;Error:stack length:&quot;+stackOverFlow.i);</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3、常量池溢出（常量池都有哪些信息，我们在后续的JVM类文件结构中详细描述）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.constant;</span><br><span class=\"line\">import java.util.ArrayList;</span><br><span class=\"line\">import java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：常量池内存溢出探究</span><br><span class=\"line\"> * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class=\"line\"> * @author YHJ create at 2011-10-30 下午04:28:30</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.constant.ConstantOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ConstantOutOfMemory &#123;</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @throws Exception</span><br><span class=\"line\">     * @Author YHJ create at 2011-10-30 下午04:28:25</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           List&lt;String&gt; strings = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">           int i = 0;</span><br><span class=\"line\">           while(true)&#123;</span><br><span class=\"line\">              strings.add(String.valueOf(i++).intern());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">           throw e;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>4、方法去溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.methodArea;</span><br><span class=\"line\">import java.lang.reflect.Method;</span><br><span class=\"line\">import net.sf.cglib.proxy.Enhancer;</span><br><span class=\"line\">import net.sf.cglib.proxy.MethodInterceptor;</span><br><span class=\"line\">import net.sf.cglib.proxy.MethodProxy;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：方法区溢出测试</span><br><span class=\"line\"> * 使用技术 CBlib</span><br><span class=\"line\"> * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午08:47:55</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public class MethodAreaOutOfMemory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @Author YHJ create at 2011-11-12 下午08:47:51</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">       while(true)&#123;</span><br><span class=\"line\">           Enhancer enhancer = new Enhancer();</span><br><span class=\"line\">           enhancer.setSuperclass(TestCase.class);</span><br><span class=\"line\">           enhancer.setUseCache(false);</span><br><span class=\"line\">           enhancer.setCallback(new MethodInterceptor() &#123;</span><br><span class=\"line\">              @Override</span><br><span class=\"line\">              public Object intercept(Object arg0, Method arg1, Object[] arg2,</span><br><span class=\"line\">                  MethodProxy arg3) throws Throwable &#123;</span><br><span class=\"line\">                  return arg3.invokeSuper(arg0, arg2);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\">           enhancer.create();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：测试用例</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午08:53:09</span><br><span class=\"line\"> * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java</span><br><span class=\"line\"> */</span><br><span class=\"line\">class TestCase&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>5、直接内存溢出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.yhj.jvm.memory.directoryMemory;</span><br><span class=\"line\">import java.lang.reflect.Field;</span><br><span class=\"line\">import sun.misc.Unsafe;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @Described：直接内存溢出测试</span><br><span class=\"line\"> * @VM args: -Xmx20M -XX:MaxDirectMemorySize=10M</span><br><span class=\"line\"> * @author YHJ create at 2011-11-12 下午09:06:10</span><br><span class=\"line\"> * @FileNmae </span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DirectoryMemoryOutOfmemory &#123;</span><br><span class=\"line\">    private static final int ONE_MB = 1024*1024;</span><br><span class=\"line\">    private static int count = 1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     * @Author YHJ create at 2011-11-12 下午09:05:54</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">       try &#123;</span><br><span class=\"line\">           Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class=\"line\">           field.setAccessible(true);</span><br><span class=\"line\">           Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class=\"line\">           while (true) &#123;</span><br><span class=\"line\">              unsafe.allocateMemory(ONE_MB);</span><br><span class=\"line\">              count++;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; catch (Exception e) &#123;</span><br><span class=\"line\">           System.out.println(&quot;Exception:instance created &quot;+count);</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125; catch (Error e) &#123;</span><br><span class=\"line\">           System.out.println(&quot;Error:instance created &quot;+count);</span><br><span class=\"line\">           e.printStackTrace();</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","date":"2018-06-19T08:00:57.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2018-06-19 16:00:57\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2018-06-29T05:18:54.675Z","_id":"cjizgr5pe0002b2o6atjlljn0","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"spring cloud初步了解","date":"2018-06-29T06:16:04.000Z","_content":"","source":"_posts/spring-cloud初步了解.md","raw":"---\ntitle: spring cloud初步了解\ndate: 2018-06-29 14:16:04\ntags:\n---\n","slug":"spring-cloud初步了解","published":1,"updated":"2018-06-29T06:16:04.698Z","_id":"cjizl3sku0000dro6wmx6m319","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjizgr5p90000b2o6vjt5jcmz","tag_id":"cjizgr5pg0003b2o61v1w22jc","_id":"cjizgr5pi0005b2o6cz7tmwr8"},{"post_id":"cjizgr5p90000b2o6vjt5jcmz","tag_id":"cjizgr5pi0004b2o68tnjk19h","_id":"cjizgr5pi0006b2o6yesdxfey"}],"Tag":[{"name":"Jvm","_id":"cjizgr5pg0003b2o61v1w22jc"},{"name":"原理","_id":"cjizgr5pi0004b2o68tnjk19h"}]}}