<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>墨客 - Jim Chen</title>
  
  <subtitle>人生苦短，做自己喜欢的事，持以之恒！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.chenjunfeng.net/"/>
  <updated>2018-06-29T06:16:04.698Z</updated>
  <id>http://www.chenjunfeng.net/</id>
  
  <author>
    <name>Jim Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring cloud初步了解</title>
    <link href="http://www.chenjunfeng.net/articles/spring-cloud%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3.html"/>
    <id>http://www.chenjunfeng.net/articles/spring-cloud初步了解.html</id>
    <published>2018-06-29T06:16:04.000Z</published>
    <updated>2018-06-29T06:16:04.698Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JVM原理</title>
    <link href="http://www.chenjunfeng.net/articles/JVM%E5%8E%9F%E7%90%86.html"/>
    <id>http://www.chenjunfeng.net/articles/JVM原理.html</id>
    <published>2018-06-19T08:26:57.000Z</published>
    <updated>2018-06-29T09:20:33.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>我们知道，计算机CPU和内存的交互是最频繁的，内存是我们的高速缓存区，用户磁盘和CPU的交互，而CPU运转速度越来越快，磁盘远远跟不上CPU的读写速度，才设计了内存，用户缓冲用户IO等待导致CPU的等待成本，但是随着CPU的发展，内存的读写速度也远远跟不上CPU的读写速度，因此，为了解决这一纠纷，CPU厂商在每颗CPU上加入了高速缓存，用来缓解这种症状，因此，现在CPU同内存交互就变成了下面的样子。</p><p><img src="../img/cpu.jpg"> </p><p>同样，根据摩尔定律，我们知道单核CPU的主频不可能无限制的增长，要想很多的提升新能，需要多个处理器协同工作， Intel总裁的贝瑞特单膝下跪事件标志着多核时代的到来。</p><p>基于高速缓存的存储交互很好的解决了处理器与内存之间的矛盾，也引入了新的问题：缓存一致性问题。在多处理器系统中，每个处理器有自己的高速缓存，而他们又共享同一块内存（下文成主存，main memory 主要内存），当多个处理器运算都涉及到同一块内存区域的时候，就有可能发生缓存不一致的现象。为了解决这一问题，需要各个处理器运行时都遵循一些协议，在运行时需要将这些协议保证数据的一致性。这类协议包括MSI、MESI、MOSI、Synapse、Firely、DragonProtocol等。如下图所示</p><p><img src="../img/memory.jpg"></p><p>Java虚拟机内存模型中定义的访问操作与物理计算机处理的基本一致！<br><img src="../img/java-memory.jpg"></p><p>Java中通过多线程机制使得多个任务同时执行处理，所有的线程共享JVM内存区域main memory，而每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理（操作码+操作数）。更多信息我们会在后面的《深入JVM—JVM类执行机制中详细解说》。<br>在之前，我们也已经提到，JVM的逻辑内存模型如下：<br><img src="../img/java-memory2.jpg"></p><p>我们现在来逐个的看下每个到底是做什么的！</p><p>1、程序计数器</p><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。如果线程正在执行的是一个Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java 虚拟机规范中没有规定任何OutOfMemoryError 情况的区域。</p><p>2、Java 虚拟机栈</p><p>与程序计数器一样，Java 虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（Stack Frame ①）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。经常有人把Java 内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗糙，Java 内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的“堆”在后面会专门讲述，而所指的“栈”就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变量表部分。局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference 类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或者其他与此对象相关的位置）和returnAddress 类型（指向了一条字节码指令的地址）。其中64 位长度的long 和double 类型的数据会占用2 个局部变量空间（Slot），其余的数据类型只占用1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。在Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。</p><p>3、本地方法栈</p><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError 和OutOfMemoryError异常。</p><p>4、Java 堆</p><p>对于大多数应用来说，Java 堆（Java Heap）是Java 虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java 虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配①，但是随着JIT 编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换②优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（GarbageCollected Heap，幸好国内没翻译成“垃圾堆”）。如果从内存回收的角度看，由于现在收集器基本都是采用的分代收集算法，所以Java 堆中还可以细分为：新生代和老年代；再细致一点的有Eden 空间、From Survivor 空间、To Survivor 空间等。如果从内存分配的角度看，线程共享的Java 堆中可能划分出多个线程私有的分配缓冲区（Thread LocalAllocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java 堆中的上述各个区域的分配和回收等细节将会是下一章的主题。根据Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx和-Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError 异常。</p><p>4、方法区</p><p>方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。对于习惯在HotSpot 虚拟机上开发和部署程序的开发者来说，很多人愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot 虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。即使是HotSpot 虚拟机本身，根据官方发布的路线图信息，现在也有放弃永久代并“搬家”至Native Memory 来实现方法区的规划了。Java 虚拟机规范对这个区域的限制非常宽松，除了和Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这个区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是有必要的。在Sun 公司的BUG 列表中，曾出现过的若干个严重的BUG 就是由于低版本的HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。根据Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出OutOfMemoryError 异常。</p><p>5、运行时常量池</p><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant PoolTable），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。Java 虚拟机对Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中①。运行时常量池相对于Class 文件常量池的另外一个重要特征是具备动态性，Java 语言并不要求常量一定只能在编译期产生，也就是并非预置入Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String 类的intern() 方法。既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无法再申请到内存时会抛出OutOfMemoryError 异常</p><p>6、直接内存</p><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError 异常出现，所以我们放到这里一起讲解。在JDK 1.4 中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O 方式，它可以使用Native 函数库直接分配堆外内存，然后通过一个存储在Java 堆里面的DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java 堆和Native 堆中来回复制数据。显然，本机直接内存的分配不会受到Java 堆大小的限制，但是，既然是内存，则肯定还是会受到本机总内存（包括RAM 及SWAP 区或者分页文件）的大小及处理器寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。</p><p>逻辑内存模型我们已经看到了，那当我们建立一个对象的时候是怎么进行访问的呢？在Java 语言中，对象访问是如何进行的？对象访问在Java 语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及Java 栈、Java 堆、方法区这三个最重要内存区<br>域之间的关联关系，如下面的这句代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj = new Object();</span><br></pre></td></tr></table></figure><p>假设这句代码出现在方法体中，那“Object obj”这部分的语义将会反映到Java 栈的本地变量表中，作为一个reference 类型数据出现。而“new Object()”这部分的语义将会反映到Java 堆中，形成一块存储了Object 类型所有实例数据值（Instance Data，对象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布局（Object Memory Layout）的不同，这块内存的长度是不固定的。另外，在Java 堆中还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地址信息，这些类型数据则存储在方法区中。由于reference 类型在Java 虚拟机规范里面只规定了一个指向对象的引用，并没有定义这个引用应该通过哪种方式去定位，以及访问到Java 堆中的对象的具体位置，因此不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接指针。如果使用句柄访问方式，Java 堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的具体地址信息，如下图所示。<br><img src="../img/java-stack.jpg"></p><p>如果使用直接指针访问方式，Java 堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，reference 中直接存储的就是对象地址，如下图所示</p><p><img src="../img/java-stack2.jpg"></p><p>这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是reference 中存<br>储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference 本身不需要被修改。使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java 中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就本书讨论的主要虚拟机Sun HotSpot 而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。下面我们来看几个示例</p><p>1、Java 堆溢出</p><p>下面的程中我们限制Java 堆的大小为20MB，不可扩展（将堆的最小值-Xms 参数与最大值-Xmx 参数设置为一样即可避免堆自动扩展），通过参数-XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机在出现内存溢出异常时Dump 出当前的内存堆转储快照以便事后进行分析。<br>参数设置如下<br><img src="../img/eclipse-conf.jpg"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package com.yhj.jvm.memory.heap;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Described：堆溢出测试</span><br><span class="line"> * @VM args:-verbose:gc -Xms20M -Xmx20M -XX:+PrintGCDetails</span><br><span class="line"> * @author YHJ create at 2011-11-12 下午07:52:22</span><br><span class="line"> * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java</span><br><span class="line"> */</span><br><span class="line">public class HeapOutOfMemory &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @param args</span><br><span class="line">     * @Author YHJ create at 2011-11-12 下午07:52:18</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       List&lt;TestCase&gt; cases = new ArrayList&lt;TestCase&gt;();</span><br><span class="line">       while(true)&#123;</span><br><span class="line">           cases.add(new TestCase());</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Described：测试用例</span><br><span class="line"> * @author YHJ create at 2011-11-12 下午07:55:50</span><br><span class="line"> * @FileNmae com.yhj.jvm.memory.heap.HeapOutOfMemory.java</span><br><span class="line"> */</span><br><span class="line">class TestCase&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 堆内存的OutOfMemoryError异常是实际应用中最常见的内存溢出异常情况。出现Java 堆内<br>存溢出时，异常堆栈信息“java.lang.OutOfMemoryError”会跟着进一步提示“Java heap</p><p>space”。</p><p>要解决这个区域的异常，一般的手段是首先通过内存映像分析工具（如Eclipse</p><p>Memory Analyzer）对dump 出来的堆转储快照进行分析，重点是确认内存中的对象是</p><p>否是必要的，也就是要先分清楚到底是出现了内存泄漏（Memory Leak）还是内存溢</p><p>出（Memory Overflow）。图2-5 显示了使用Eclipse Memory Analyzer 打开的堆转储快</p><p>照文件。</p><p>如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots 的引用链。于是就</p><p>能找到泄漏对象是通过怎样的路径与GC Roots 相关联并导致垃圾收集器无法自动回收</p><p>它们的。掌握了泄漏对象的类型信息，以及GC Roots 引用链的信息，就可以比较准确</p><p>地定位出泄漏代码的位置。</p><p>如果不存在泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查</p><p>虚拟机的堆参数（-Xmx 与-Xms），与机器物理内存对比看是否还可以调大，从代码上</p><p>检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期</p><p>的内存消耗。</p><p>以上是处理Java 堆内存问题的简略思路，处理这些问题所需要的知识、工具与经验</p><p>在后面的几次分享中我会做一些额外的分析。</p><p>2、java栈溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.yhj.jvm.memory.stack;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Described：栈层级不足探究</span><br><span class="line"> * @VM args:-Xss128k</span><br><span class="line"> * @author YHJ create at 2011-11-12 下午08:19:28</span><br><span class="line"> * @FileNmae com.yhj.jvm.memory.stack.StackOverFlow.java</span><br><span class="line"> */</span><br><span class="line">public class StackOverFlow &#123;</span><br><span class="line">    private int i ;</span><br><span class="line">    public void plus() &#123;</span><br><span class="line">       i++;</span><br><span class="line">       plus();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * @param args</span><br><span class="line">     * @Author YHJ create at 2011-11-12 下午08:19:21</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       StackOverFlow stackOverFlow = new StackOverFlow();</span><br><span class="line">       try &#123;</span><br><span class="line">           stackOverFlow.plus();</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           System.out.println(&quot;Exception:stack length:&quot;+stackOverFlow.i);</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; catch (Error e) &#123;</span><br><span class="line">           System.out.println(&quot;Error:stack length:&quot;+stackOverFlow.i);</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、常量池溢出（常量池都有哪些信息，我们在后续的JVM类文件结构中详细描述）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.yhj.jvm.memory.constant;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Described：常量池内存溢出探究</span><br><span class="line"> * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class="line"> * @author YHJ create at 2011-10-30 下午04:28:30</span><br><span class="line"> * @FileNmae com.yhj.jvm.memory.constant.ConstantOutOfMemory.java</span><br><span class="line"> */</span><br><span class="line">public class ConstantOutOfMemory &#123;</span><br><span class="line">    /**</span><br><span class="line">     * @param args</span><br><span class="line">     * @throws Exception</span><br><span class="line">     * @Author YHJ create at 2011-10-30 下午04:28:25</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           List&lt;String&gt; strings = new ArrayList&lt;String&gt;();</span><br><span class="line">           int i = 0;</span><br><span class="line">           while(true)&#123;</span><br><span class="line">              strings.add(String.valueOf(i++).intern());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           throw e;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、方法去溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">package com.yhj.jvm.memory.methodArea;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line">import net.sf.cglib.proxy.Enhancer;</span><br><span class="line">import net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line">import net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Described：方法区溢出测试</span><br><span class="line"> * 使用技术 CBlib</span><br><span class="line"> * @VM args : -XX:PermSize=10M -XX:MaxPermSize=10M</span><br><span class="line"> * @author YHJ create at 2011-11-12 下午08:47:55</span><br><span class="line"> * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class MethodAreaOutOfMemory &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param args</span><br><span class="line">     * @Author YHJ create at 2011-11-12 下午08:47:51</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       while(true)&#123;</span><br><span class="line">           Enhancer enhancer = new Enhancer();</span><br><span class="line">           enhancer.setSuperclass(TestCase.class);</span><br><span class="line">           enhancer.setUseCache(false);</span><br><span class="line">           enhancer.setCallback(new MethodInterceptor() &#123;</span><br><span class="line">              @Override</span><br><span class="line">              public Object intercept(Object arg0, Method arg1, Object[] arg2,</span><br><span class="line">                  MethodProxy arg3) throws Throwable &#123;</span><br><span class="line">                  return arg3.invokeSuper(arg0, arg2);</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">           enhancer.create();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Described：测试用例</span><br><span class="line"> * @author YHJ create at 2011-11-12 下午08:53:09</span><br><span class="line"> * @FileNmae com.yhj.jvm.memory.methodArea.MethodAreaOutOfMemory.java</span><br><span class="line"> */</span><br><span class="line">class TestCase&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、直接内存溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package com.yhj.jvm.memory.directoryMemory;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import sun.misc.Unsafe;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Described：直接内存溢出测试</span><br><span class="line"> * @VM args: -Xmx20M -XX:MaxDirectMemorySize=10M</span><br><span class="line"> * @author YHJ create at 2011-11-12 下午09:06:10</span><br><span class="line"> * @FileNmae </span><br><span class="line"> */</span><br><span class="line">public class DirectoryMemoryOutOfmemory &#123;</span><br><span class="line">    private static final int ONE_MB = 1024*1024;</span><br><span class="line">    private static int count = 1;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * @param args</span><br><span class="line">     * @Author YHJ create at 2011-11-12 下午09:05:54</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       try &#123;</span><br><span class="line">           Field field = Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="line">           field.setAccessible(true);</span><br><span class="line">           Unsafe unsafe = (Unsafe) field.get(null);</span><br><span class="line">           while (true) &#123;</span><br><span class="line">              unsafe.allocateMemory(ONE_MB);</span><br><span class="line">              count++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line">           System.out.println(&quot;Exception:instance created &quot;+count);</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125; catch (Error e) &#123;</span><br><span class="line">           System.out.println(&quot;Error:instance created &quot;+count);</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内存&quot;&gt;&lt;a href=&quot;#内存&quot; class=&quot;headerlink&quot; title=&quot;内存&quot;&gt;&lt;/a&gt;内存&lt;/h2&gt;&lt;p&gt;我们知道，计算机CPU和内存的交互是最频繁的，内存是我们的高速缓存区，用户磁盘和CPU的交互，而CPU运转速度越来越快，磁盘远远跟不上CPU
      
    
    </summary>
    
    
      <category term="Jvm" scheme="http://www.chenjunfeng.net/tags/Jvm/"/>
    
      <category term="原理" scheme="http://www.chenjunfeng.net/tags/%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>BlueLake主题搭建博客</title>
    <link href="http://www.chenjunfeng.net/articles/BlueLake%E4%B8%BB%E9%A2%98%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2.html"/>
    <id>http://www.chenjunfeng.net/articles/BlueLake主题搭建博客.html</id>
    <published>2015-08-29T10:06:06.000Z</published>
    <updated>2018-06-29T10:32:24.391Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址： <a href="http://chaoo.oschina.io/2016/12/29/BlueLake博客主题的详细配置.html" target="_blank" rel="noopener">http://chaoo.oschina.io/2016/12/29/BlueLake博客主题的详细配置.html</a></p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>BlueLake主题写了有一段时间了，经常会有朋友发消息给我问一些配置的问题，这篇博文主要也是为了解决这些问题。主题以简洁轻量自居(实则简陋)，去掉了Jquery和Fancybox,用原生JS实现站内搜索功能和回到顶部效果。这个主题只是一个小小的雏形，期待您来帮助它成长。</p><p>在阅读本文之前，假定您已经成功安装了Hexo，并使用 Hexo 提供的命令创建了一个静态博客。Hexo是一个快速、简洁且高效的博客框架。Hexo基于Node.js ，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>需要特别注意的是Hexo有两个_config.yml配置文件，一份位于站点根目录下，主要包含 Hexo 站点本身的配置，下文中会称为根_config.yml；另一份位于主题目录下（themes/主题名/_config.yml），这份配置由主题作者提供，主要用于配置主题相关的选项,下文中会称为主题_config.yml。</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>您可以直接到BlueLake发布页下载，然后解压拷贝到themes目录下，修改配置即可。<br>不过我还是推荐使用GIT来checkout代码，之后也可以通过git pull来快速更新。</p><h3 id="1-1-安装主题"><a href="#1-1-安装主题" class="headerlink" title="1.1 安装主题"></a>1.1 安装主题</h3><p>在根目录下打开终端窗口：<br><code>$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake</code></p><h3 id="1-2-安装主题渲染器"><a href="#1-2-安装主题渲染器" class="headerlink" title="1.2 安装主题渲染器"></a>1.2 安装主题渲染器</h3><p>BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-jade@0.3.0 --save</span><br><span class="line">$ npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="1-3-启用主题"><a href="#1-3-启用主题" class="headerlink" title="1.3 启用主题"></a>1.3 启用主题</h3><p>打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。</p><p><code>theme: BlueLake</code></p><h3 id="1-4-验证"><a href="#1-4-验证" class="headerlink" title="1.4 验证"></a>1.4 验证</h3><p>首先启动 Hexo 本地站点，并开启调试模式：</p><p><code>$ hexo s --debug</code></p><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：INFO Hexo is running at <a href="http://0.0.0.0:4000/" target="_blank" rel="noopener">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p><p>此时即可使用浏览器访问 <a href="http://localhost:4000，检查站点是否正确运行。" target="_blank" rel="noopener">http://localhost:4000，检查站点是否正确运行。</a></p><h3 id="1-5-更新主题"><a href="#1-5-更新主题" class="headerlink" title="1.5 更新主题"></a>1.5 更新主题</h3><p>今后若主题添加了新功能正是您需要的，您可以直接git pull来更新主题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/BlueLake</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><h3 id="2-1-配置网站头部显示文字"><a href="#2-1-配置网站头部显示文字" class="headerlink" title="2.1 配置网站头部显示文字"></a>2.1 配置网站头部显示文字</h3><p>打开根_config.yml，找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: </span><br><span class="line">subtitle: </span><br><span class="line">description: </span><br><span class="line">author:</span><br></pre></td></tr></table></figure><p>title和subtitle分别是网站主标题和副标题，会显示在网站头部；description在网站界面不会显示，内容会加入网站源码的meta标签中，主要用于SEO；author就填写网站所有者的名字，会在网站底部的Copyright处有所显示。</p><h3 id="2-2-设置语言"><a href="#2-2-设置语言" class="headerlink" title="2.2 设置语言"></a>2.2 设置语言</h3><p>该主题目前有七种语言：简体中文（zh-CN），繁体中文（zh-TW），英语（en），法语（fr-FR），德语（de-DE），韩语 （ko）,西班牙语（es-ES）；例如选用简体中文，在根_config.yml配置如下：</p><p><code>language: zh-CN</code></p><h3 id="2-3-设置菜单"><a href="#2-3-设置菜单" class="headerlink" title="2.3 设置菜单"></a>2.3 设置菜单</h3><p>打开主题_config.yml，找到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  - page: home</span><br><span class="line">    directory: .</span><br><span class="line">    icon: fa-home</span><br><span class="line">  - page: archive</span><br><span class="line">    directory: archives/</span><br><span class="line">    icon: fa-archive</span><br><span class="line">  # - page: about</span><br><span class="line">  #   directory: about/</span><br><span class="line">  #   icon: fa-user</span><br><span class="line">  - page: rss</span><br><span class="line">    directory: atom.xml</span><br><span class="line">    icon: fa-rss</span><br></pre></td></tr></table></figure><p>主题默认是展示四个菜单，即主页home，归档archive，关于about，订阅RSS；about需要手动添加，RSS需要安装插件，若您并不需要，可以直接注释掉。</p><p>每个页面底部的footer中联系博主的三个图标分别是邮箱，微博主页链接地址，GitHUb个人页链接地址，直接使用主题_config.yml中about页面的配置，若不需要about页面，只需要如下配置就好：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">about:</span><br><span class="line">  email: ## 个人邮箱 </span><br><span class="line">  weibo_url: ## 微博主页链接地址</span><br><span class="line">  github_url: ## github主页链接地址</span><br></pre></td></tr></table></figure><h4 id="2-3-1-添加about页"><a href="#2-3-1-添加about页" class="headerlink" title="2.3.1 添加about页"></a>2.3.1 添加about页</h4><p>此主题默认page页面是关于我页面的布局，在根目录下打开命令行窗口，生成一个关于我页面：</p><p><code>$ hexo new page &#39;about&#39;</code></p><p>打开主题_config.yml，补全关于我页面的详细信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">about:</span><br><span class="line">  photo_url: ## 头像的链接地址</span><br><span class="line">  email: ## 个人邮箱 </span><br><span class="line">  weibo_url: ## 微博主页链接地址</span><br><span class="line">  weibo_name: ## 微博用户名 </span><br><span class="line">  github_url: ## github主页链接地址</span><br><span class="line">  github_name: ## github用户名</span><br></pre></td></tr></table></figure><p>当然您也可以自定义重新布局about页面，只需要修改layout/page.jade模板就好。</p><h4 id="2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件"><a href="#2-3-2-安装-RSS-订阅-和-sitemap-网站地图-插件" class="headerlink" title="2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件"></a>2.3.2 安装 RSS(订阅) 和 sitemap(网站地图) 插件</h4><p>在根目录下打开命令行窗口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br><span class="line">$ npm install hexo-generator-sitemap --save</span><br><span class="line">$ npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><p>添加主题_config.yml配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Plugins:</span><br><span class="line">  hexo-generator-feed</span><br><span class="line">  hexo-generator-sitemap</span><br><span class="line">  hexo-generator-baidu-sitemap</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h3 id="2-4-添加本地搜索"><a href="#2-4-添加本地搜索" class="headerlink" title="2.4 添加本地搜索"></a>2.4 添加本地搜索</h3><p>默认本地搜索是用原生JS写的，但还需要HEXO插件创建的JSON数据文件配合。安装插件hexo-generator-json-content来创建JSON数据文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content@2.2.0 --save</span><br></pre></td></tr></table></figure><p>然后在根_config.yml添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">jsonContent:</span><br><span class="line">  meta: false</span><br><span class="line">  pages: false</span><br><span class="line">  posts:</span><br><span class="line">    title: true</span><br><span class="line">    date: true</span><br><span class="line">    path: true</span><br><span class="line">    text: true</span><br><span class="line">    raw: false</span><br><span class="line">    content: false</span><br><span class="line">    slug: false</span><br><span class="line">    updated: false</span><br><span class="line">    comments: false</span><br><span class="line">    link: false</span><br><span class="line">    permalink: false</span><br><span class="line">    excerpt: false</span><br><span class="line">    categories: false</span><br><span class="line">    tags: true</span><br></pre></td></tr></table></figure><p>最后在主题_config.yml添加配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local_search: true</span><br></pre></td></tr></table></figure><h3 id="2-5-修改站点图标"><a href="#2-5-修改站点图标" class="headerlink" title="2.5 修改站点图标"></a>2.5 修改站点图标</h3><p>站点图标存放在主题的Source目录下，已经默认为您准备了两张图片。您也可以自己设计站点LOGO。<br>您需要准备一张ico格式并命名为 favicon.ico ，请将其放入hexo目录的source文件夹，建议大小：32px X 32px。</p><p>您需要为苹果设备添加网站徽标，请命名为 apple-touch-icon.png 的图像放入hexo目录的“source”文件夹中，建议大小为：114px X 114px。<br>(有很多网站都可以在线生成ico格式的图片。)</p><h3 id="2-6-添加站点关键字"><a href="#2-6-添加站点关键字" class="headerlink" title="2.6 添加站点关键字"></a>2.6 添加站点关键字</h3><p>请在hexo目录的根_config.yml中添加keywords字段，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 网站简要描述,如：Charles·Zheng&apos;s blog.</span><br><span class="line">keywords: 网站关键字, key, key1, key2, key3</span><br><span class="line">author: Charles</span><br><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><h3 id="2-7-其他配置"><a href="#2-7-其他配置" class="headerlink" title="2.7 其他配置"></a>2.7 其他配置</h3><p>主题_config.yml的其他配置</p><p>show_category_count——是否显示分类下的文章数。<br>widgets_on_small_screens——是否在小屏显示侧边栏，若true,则侧边栏挂件将显示在底部。</p><p>主题_config.ymlthemes/BlueLake/_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show_category_count: true </span><br><span class="line">widgets_on_small_screens: true</span><br></pre></td></tr></table></figure><h2 id="3-集成第三方服务"><a href="#3-集成第三方服务" class="headerlink" title="3.集成第三方服务"></a>3.集成第三方服务</h2><h3 id="3-1-添加评论"><a href="#3-1-添加评论" class="headerlink" title="3.1 添加评论"></a>3.1 添加评论</h3><p>目前主题集成六种第三方评论，分别是多说评论、Disqus评论、来必力评论、友言评论、网易云跟帖评论、畅言评论，多说马上就要停止服务了，友言好像也没怎么维护,目前我已把自己的博客评论从多说转移到畅言了，在国内目前网易云跟帖和畅言还不错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">注册并获得代码。</span><br><span class="line">若使用多说评论，注册多说后获得short_name。</span><br><span class="line">若使用Disqus评论，注册Disqus后获得short_name。</span><br><span class="line">若使用来必力评论，注册来必力,获得data-uid。</span><br><span class="line">若使用友言评论，注册友言,获得uid。</span><br><span class="line">若使用网易云跟帖评论，注册网易云跟帖,获得productKey。</span><br><span class="line">若使用畅言评论，注册畅言，获得appid，appkey。</span><br></pre></td></tr></table></figure><p>配置主题_config.yml：<br>主题_config.ymlthemes/BlueLake/_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#Cmments</span><br><span class="line">comment:</span><br><span class="line">  duoshuo: ## duoshuo_shortname</span><br><span class="line">  disqus: ## disqus_shortname</span><br><span class="line">  livere: ## 来必力(data-uid)</span><br><span class="line">  uyan: ## 友言(uid)</span><br><span class="line">  cloudTie: ## 网易云跟帖(productKey)</span><br><span class="line">  changyan: ## 畅言需在下方配置两个参数，此处不填。</span><br><span class="line">    appid: ## 畅言(appid)</span><br><span class="line">    appkey: ##畅言(appkey)</span><br></pre></td></tr></table></figure><h3 id="3-2-百度统计"><a href="#3-2-百度统计" class="headerlink" title="3.2 百度统计"></a>3.2 百度统计</h3><p>登录百度统计，定位到站点的代码获取页面。<br>复制//hm.baidu.com/hm.js?后面那串统计脚本id(假设为：8006843039519956000)<br>配置主题_config.yml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baidu_analytics: 8006843039519956000</span><br></pre></td></tr></table></figure><p>注意： baidu_analytics不是你的百度id或者百度统计id<br>如若使用谷歌统计，配置方法与百度统计类似。</p><h3 id="3-3-卜算子阅读次数统计"><a href="#3-3-卜算子阅读次数统计" class="headerlink" title="3.3 卜算子阅读次数统计"></a>3.3 卜算子阅读次数统计</h3><p>主题_config.ymlthemes/BlueLake/_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">busuanzi: true</span><br></pre></td></tr></table></figure><p>若设置为true将计算文章的阅读量(Hits)，并显示在文章标题下的小手图标旁。</p><h3 id="3-4-微博秀"><a href="#3-4-微博秀" class="headerlink" title="3.4 微博秀"></a>3.4 微博秀</h3><p>微博秀挂件的代码放在layout/_widget/weibo.jade下，需要您去微博开放平台获取您自己的微博秀代码来替换。</p><p>登录微博开放平台，选择微博秀。</p><p>为了与主题风格统一，作如下配置</p><p>基础设置：高400px；勾选宽度自适应；颜色选择白色；</p><p>样式设置：主字色#333；链接色#40759b；鼠标悬停色#f7f8f8；</p><p>模块设置：去掉标题、边框、粉丝的勾选框，只留微博。</p><p>复制代码里src=””里引号包裹的内容，替换到layout/_widget/weibo.jade</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.widget</span><br><span class="line">  .widget-title</span><br><span class="line">    i(class=&apos;fa fa-weibo&apos;)= &apos; &apos; + __(&apos;新浪微博&apos;)</span><br><span class="line">iframe(width=&quot;100%&quot;,height=&quot;400&quot;,class=&quot;share_self&quot;,frameborder=&quot;0&quot;,scrolling=&quot;no&quot;,src=&quot;http://widget.weibo.com/weiboshow/index.php?language=&amp;width=0&amp;height=400&amp;fansRow=2&amp;ptype=1&amp;speed=0&amp;skin=5&amp;isTitle=0&amp;noborder=0&amp;isWeibo=1&amp;isFans=0&amp;uid=1700139362&amp;verifier=85be6061&amp;colors=d6f3f7,ffffff,333,40759b,f7f8f8&amp;dpc=1&quot;)</span><br></pre></td></tr></table></figure><p>这只是为了和主题的风格统一，当然您也可以自由随意发挥。</p><p>注意：最主要是是要把src里uid=和verifier=后面的字段替换为您自己代码里的就好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文地址： &lt;a href=&quot;http://chaoo.oschina.io/2016/12/29/BlueLake博客主题的详细配置.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://chaoo.oschina.io/2016/12/
      
    
    </summary>
    
    
      <category term="BlueLake" scheme="http://www.chenjunfeng.net/tags/BlueLake/"/>
    
      <category term="博客主题" scheme="http://www.chenjunfeng.net/tags/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/"/>
    
      <category term="blogTheme" scheme="http://www.chenjunfeng.net/tags/blogTheme/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.chenjunfeng.net/articles/hello-world.html"/>
    <id>http://www.chenjunfeng.net/articles/hello-world.html</id>
    <published>2015-08-19T08:00:57.000Z</published>
    <updated>2018-06-29T10:44:07.243Z</updated>
    
    <content type="html"><![CDATA[<p><br><br><br></p><h2><center>Hello World !</center></h2><h3><center>欢迎来到我的博客！</center></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2&gt;&lt;center&gt;Hello World !&lt;/center&gt;&lt;/h2&gt;


&lt;h3&gt;&lt;center&gt;欢迎来到我的博客！&lt;/center&gt;&lt;/h3&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
